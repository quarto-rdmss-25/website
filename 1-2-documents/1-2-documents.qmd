---
title: "{{< var md-02.title >}}"
subtitle: "{{< var course.long-title >}}"
author: "Lars Sch√∂bitz"
date: "2025-06-05"
date-format: long
footer: "[{{< fa link >}} {{< var course.site-short >}}]({{< var course.site >}})"
logo: "../images/ghe-square-logo-vector.svg"
format:
  revealjs:
    theme: ../style/slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
bibliography: ../references.bib
editor: source
execute:
  freeze: auto
  echo: true
---

```{r}
#| label: setup
#| include: false

# set width of code output
options(width = 65)

# load background packages
library(countdown)
```

# Anatomy of a Quarto document {background-color="#4C326A"}

## Components

1.  Metadata: YAML

2.  Text: Markdown

3.  Code: Executed via `knitr` or `jupyter`

. . .

**Weave it all together**, and you have beautiful, powerful, and useful outputs!

## Literate programming {.smaller}

Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros.

````         
---
title: "ggplot2 demo"
date: "5/23/2023"
format: html
---

## MPG

There is a relationship between city and highway mileage.

```{{r}}
#| label: fig-mpg

library(ggplot2)

ggplot(mpg, aes(x = cty, y = hwy)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```
````

::: aside
Source: <https://en.wikipedia.org/wiki/Literate_programming>
:::

# Metadata {background-color="#4C326A"}

## YAML

"Yet Another Markup Language" or "YAML Ain't Markup Language" is used to provide document level metadata.

``` yaml
---
key: value
---
```

## Output options

``` yaml
---
format: something
---
```

. . .

<br>

``` yaml
---
format: html
---
```

``` yaml
---
format: pdf
---
```

``` yaml
---
format: revealjs
---
```

## Output option arguments

Indentation matters!

``` yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```

## YAML validation {.smaller}

-   Invalid: No space after `:`

``` yaml
---
format:html
---
```

-   Invalid: Read as missing

``` yaml
---
format:
html
---
```

## YAML validation {.smaller}

There are multiple ways of formatting valid YAML:

-   Valid: There's a space after `:`

``` yaml
format: html
```

-   Valid: `format: html` with selections made with proper indentation

``` yaml
format: 
  html:
    toc: true
```

## List of valid YAML fields

-   Many YAML fields are common across various outputs

-   But also each output type has its own set of valid YAML fields and options

-   Definitive list: [quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)

# Text {background-color="#4C326A"}

## Text Formatting

+-------------------------------+-------------------------------+
| Markdown Syntax               | Output                        |
+===============================+===============================+
| ```                           | *italics* and **bold**        |
| *italics* and **bold**        |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | superscript^2^ / subscript~2~ |
| superscript^2^ / subscript~2~ |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | ~~strikethrough~~             |
| ~~strikethrough~~             |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | `verbatim code`               |
| `verbatim code`               |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+

: {tbl-colwidths="\[50,50\]"}

## Headings {.smaller}

+-----------------+-----------------+
| Markdown Syntax | Output          |
+=================+=================+
| ```             | # Header 1      |
| # Header 1      |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ## Header 2     |
| ## Header 2     |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ### Header 3    |
| ### Header 3    |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | #### Header 4   |
| #### Header 4   |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ##### Header 5  |
| ##### Header 5  |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ###### Header 6 |
| ###### Header 6 |                 |
| ```             |                 |
+-----------------+-----------------+

: {tbl-colwidths="\[50,50\]"}

## Links {.smaller}

There are several types of "links" or hyperlinks.

::: columns
::: {.column width="80%"}
**Markdown**

``` markdown
You can embed [named hyperlinks](https://quarto.org/),
direct urls like <https://quarto.org/>, and links to 
[other places](#quarto-anatomy) in 
the document. The syntax is similar for embedding an
inline image: 
![Penguins playing with ball](images/penguins-quarto-ball.png).
```
:::

::: {.column .fragment width="20%"}
**Output**

You can embed [named hyperlinks](https://quarto.org/), direct urls like <https://quarto.org/>, and links to [other places](#quarto-anatomy) in the document. The syntax is similar for embedding an inline image: ![Penguins playing with ball](images/penguins-quarto-ball.png){style="width:250px;"}.
:::
:::

## Lists {.smaller}

Unordered list:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
-   unordered list         
    -   sub-item 1         
    -   sub-item 1         
        -   sub-sub-item 1 
```
:::

::: {.column .fragment width="50%" fragment-index="1"}
**Output**

-   unordered list
    -   sub-item 1\
    -   sub-item 1
        -   sub-sub-item 1
:::
:::

Ordered list:

::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
1. ordered list            
2. item 2                  
    i. sub-item 1          
         A.  sub-sub-item 1
```
:::

::: {.column .fragment width="50%" fragment-index="2"}
**Output**

1.  ordered list\
2.  item 2
    i.  sub-item 1
        A.  sub-sub-item 1
:::
:::

## Quotes

**Markdown:**

``` markdown
> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. 
> - Donald Knuth, Literate Programming
```

. . .

**Output:**

> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming

::: aside
@knuth1984literate
:::

## Your turn

::: task
-   Open `markdown-syntax.qmd` in RStudio.
-   Use the [source editor]{.highlight-yellow} mode
-   Follow the instructions in the document, then exchange one new thing you've learned with your neighbor.
:::

```{r}
#| echo: false

countdown(minutes = 7)
```

## Callouts

```         
::: callout-note
Note that there are five types of callouts, including: 
`note`, `tip`, `warning`, `caution`, and `important`.
:::
```

::: callout-note
Note that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.
:::

## More callouts

::: callout-warning
Callouts provide a simple way to attract attention, for example, to this warning.
:::

::: callout-important
Danger, callouts will really improve your writing.
:::

::: callout-caution
Here is something under construction.
:::

::: callout-tip
## Caption

Tip with caption.
:::

## Your turn

::: task
-   Open `callout-boxes.qmd` and render the document.
-   Using the [visual editor]{.highlight-yellow} mode, change the type of the first callouts box and then re-render.
-   Add a caption to the second callout box.
-   Make the third callout box collapsible. Then, switch over to the [source editor]{.highlight-yellow} mode to inspect the markdown code.
-   Change the format to PDF and re-render.
:::

::: callout-tip
## How to edit the options?

![](images/edit-code-chunk-options.png){style="width:800px;"}
:::

```{r}
#| echo: false

countdown(minutes = 7)
```

## Footnotes

Numbering and formatting footnotes is supported.

## Inline footnotes

```         
Here is an inline note.^[Inlines notes are easier to write,
since you don't have to pick an identifier and move down to
type the note.]
```

Here is an inline note.[^1]

[^1]: Inline notes are easier to write, since you don't have to pick an identifier and move down to type the note.

::: callout-tip
## Use the source editor mode

The source editor mode is the recommended way to add footnotes.
:::

# Code {background-color="#4C326A"}

## Anatomy of a code chunk {.small}

::: columns
::: {.column width="50%"}
```{r}
#| label: penguins
#| message: false
#| echo: fenced

library(tidyverse)
library(palmerpenguins)
library(knitr)

penguins |> 
  count(species) |> 
  kable()
```
:::

::: {.column .fragment width="50%"}
-   Has 3x backticks on each end
-   Engine (`r`) is indicated between curly braces `{r}`
-   Options stated with the `#|` (hashpipe)
:::
:::

## Code, who is it for?

::: incremental
-   The way you display code is very different for different contexts.
-   In a teaching scenario like today, I *really* want to display code.
-   In a business, you may want to have a data-science facing output which displays the source code AND a stakeholder-facing output which hides the code.
:::

## Showing and hiding code with `echo`

-   The `echo` option shows the code when set to `true` and hides it when set to `false`.

## Tables and figures

-   In reproducible reports and manuscripts, the most commonly included code outputs are **tables** and **figures**.

-   So they get their own special sections in our deep dive!

# Tables {background-color="#4C326A"}

## Markdown tables {.small}

**Markdown:**

``` markdown
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
```

::: callout-tip
## Use the source editor mode

The source editor mode is the recommended way to add markdown tables. These are tables, which are not generated from code.
:::

. . .

**Output:**

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|    12 | 12   | 12      |   12   |
|   123 | 123  | 123     |  123   |
|     1 | 1    | 1       |   1    |

## Tables from code {.smaller}

The **knitr** package can turn data frames into tables with `knitr::kable()`:

```{r}
library(knitr)

penguins |> 
  count(species, island) |> 
  kable()
```

## Tables from code {.smaller}

If you want fancier tables, try the **gt** package and [all that it offers](https://gt.rstudio.com/)!

```{r}
#| output-location: column-fragment

library(gt)

head(penguins) |> 
  gt() |>
  tab_style(
    style = list(
      cell_fill(color = "pink"),
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = bill_length_mm,
      rows = bill_length_mm > 40
    )
  )
```

# Figures {background-color="#4C326A"}

## Markdown figures

```         
![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)
```

![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)

## Subfigures

**Markdown:**

```         
::: {#fig-penguins layout-ncol=2}

![Blue penguin](images/blue-penguin.png){#fig-blue width="250px"}

![Orange penguin](images/orange-penguin.png){#fig-orange width="250px"}

Two penguins

:::
```

## Subfigures

**Output:**

::: {#fig-penguins layout-ncol="2"}
![Blue penguin](images/blue-penguin.png){#fig-blue width="250px"}

![Orange penguin](images/orange-penguin.png){#fig-sleep width="250px"}

Two penguins
:::

## Finding the figures to include

In places like markdown, YAML, or the command line/shell/terminal, you'll need to use **absolute** or **relative** file paths:

. . .

-   Absolute = BAD: `"/Users/lars/exercises"` - Whose computer will this work on?

. . .

-   Relative = BETTER:

    -   `"../` = up one directory, `../../` = up two directories, etc.
    -   `/..` or `/` = start from `root` directory of your current computer

## Figures with code

```{r}
#| echo: fenced
#| fig-width: 4
#| fig-align: right

knitr::include_graphics("images/penguins-quarto-ball.png")
```

## Referencing paths in R code

Use the **here** package to reference the project root, as `here::here()` always starts at the top-level directory of a `.Rproj`:

```{r}
here::here()
```

## Figures from code

```{r}
#| echo: fenced

ggplot(penguins, aes(x = species, fill = species)) +
  geom_bar(show.legend = FALSE)
```

# Cross references {background-color="#4C326A"}

## Cross references

-   Help readers to navigate your document with numbered references and hyperlinks to entities like figures and tables.

-   Cross referencing steps:

    -   Add a caption to your figure or table.
    -   Give an ID to your figure or table, starting with `fig-` or `tbl-`.
    -   Refer to it with `@fig-...` or `@tbl-...`.

## Figure cross references {.smaller}

The presence of the caption (`Blue penguin`) and label (`#fig-blue-penguin`) make this figure referenceable:

::: columns
::: {.column width="75%"}
**Markdown:**

``` markdown
See @fig-blue-penguin for a cute blue penguin.
![Blue penguin](images/blue-penguin.png){#fig-blue-penguin}
```
:::

::: {.column width="25%"}
**Output:**

See @fig-blue-penguin for a cute blue penguin.

![Blue penguin](images/blue-penguin.png){#fig-blue-penguin fig-alt="A blue penguin" width="150"}
:::
:::

## Table cross references {.smaller}

The presence of the caption (`A few penguins`) and label (`#tbl-penguins`) make this table referenceable:

::: columns
::: {.column width="50%"}
**Markdown:**

```` markdown
See @tbl-penguins for data on a few penguins.
```{{r}}
#| label: tbl-penguins
#| tbl-cap: A few penguins

head(penguins) |> 
  gt()
```
````
:::

::: {.column width="50%"}
**Output:**

See @tbl-penguins for data on a few penguins.

```{r}
#| label: tbl-penguins
#| tbl-cap: A few penguins

head(penguins) |> 
  gt()
```
:::
:::

## Thanks! `r emo::ji("sunflower")`

Slides created via revealjs and Quarto: <https://quarto.org/docs/presentations/revealjs/>

All material is licensed under [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/).

